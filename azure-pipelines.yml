# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: NuGetToolInstaller@0

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: GitVersion@5
  inputs:
    runtime: 'core'
    configFilePath: 'GitVersion.yml'
    updateAssemblyInfo: true
    updateAssemblyInfoFilename: 'SharedAssemblyInfo.cs'

- task: VSBuild@1
  inputs:
    solution: '**\*.sln'
    platform: 'any cpu'
    configuration: 'Standalone'
    maximumCpuCount: true
    msbuildArchitecture: 'x64'
    createLogFile: true
    logFileVerbosity: 'detailed'

- task: PowerShell@2
  displayName: "Debug #1"
  inputs:
    targetType: 'inline'
    script: |
      pwd
      Write-Host "Build.BinariesDirectory"
      ls -recurse $(Build.BinariesDirectory)
      Write-Host "Agent.BuildDirectory"
      ls -recurse $(Agent.BinariesDirectory)

- task: CopyFiles@2
  inputs:
    SourceFolder: '$(Agent.BinariesDirectory)'
    Contents: |
      *.dll
      *.exe
      *.config
    TargetFolder: '$(Build.BinariesDirectory)'
    OverWrite: true

- task: PowerShell@2
  displayName: "Debug #2"
  inputs:
    targetType: 'inline'
    script: |
      pwd
      Write-Host "Build.BinariesDirectory"
      ls -recurse $(Build.BinariesDirectory)
      Write-Host "Agent.BuildDirectory"
      ls -recurse $(Agent.BinariesDirectory)

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.BinariesDirectory)/'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/Sentinel-$(GitVersion.SemVer).zip'
    replaceExistingArchive: true
    verbose: true

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'

#- task: VSTest@2
#  inputs:
#    platform: '$(buildPlatform)'
#    configuration: '$(buildConfiguration)'
